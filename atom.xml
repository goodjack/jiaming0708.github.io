<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Secret Note</title>
  
  <subtitle>機密檔案</subtitle>
  <link href="http://jiaming0708.github.io/atom.xml" rel="self"/>
  
  <link href="http://jiaming0708.github.io/"/>
  <updated>2021-12-23T14:31:36.229Z</updated>
  <id>http://jiaming0708.github.io/</id>
  
  <author>
    <name>Jimmy Ho</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Blazor] 元件測試 - 基礎篇</title>
    <link href="http://jiaming0708.github.io/2021/12/23/blazor-testing-basic/"/>
    <id>http://jiaming0708.github.io/2021/12/23/blazor-testing-basic/</id>
    <published>2021-12-23T14:27:50.000Z</published>
    <updated>2021-12-23T14:31:36.229Z</updated>
    
    
    <summary type="html">&lt;p&gt;寫了很多的元件來使用，但要怎麼確保行為正確，在修改的時候沒有把一些行為改壞，可以透過&lt;code&gt;測試&lt;/code&gt;來進行保護，在 Blazor 中可以透過 &lt;a href=&quot;https://bunit.dev/&quot;&gt;&lt;strong&gt;bUnit&lt;/strong&gt;&lt;/a&gt; 這個套件來達成。&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="http://jiaming0708.github.io/categories/Front-end/"/>
    
    <category term="Blazor" scheme="http://jiaming0708.github.io/categories/Front-end/Blazor/"/>
    
    
    <category term="Blazor" scheme="http://jiaming0708.github.io/tags/Blazor/"/>
    
    <category term="Testing" scheme="http://jiaming0708.github.io/tags/Testing/"/>
    
  </entry>
  
  <entry>
    <title>在瀏覽器偵測裝置是否已經安裝應用程式</title>
    <link href="http://jiaming0708.github.io/2021/11/18/detect-application-installed/"/>
    <id>http://jiaming0708.github.io/2021/11/18/detect-application-installed/</id>
    <published>2021-11-18T02:10:54.000Z</published>
    <updated>2021-12-23T14:31:36.229Z</updated>
    
    
    <summary type="html">&lt;p&gt;前面介紹了在瀏覽器開起應用程式及封裝應用程式，今天要來介紹的是如何在瀏覽器中偵測裝置是否已經安裝，根據狀態來決定是否要顯示不同的文字內容。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;還沒有看的話，可以先回頭看看這兩篇 &lt;a href=&quot;/2021/10/11/browser-open-application/&quot; title=&quot;如何在瀏覽器開啟應用程式&quot;&gt;如何在瀏覽器開啟應用程式&lt;/a&gt;、&lt;a href=&quot;/2021/11/06/vs-installer-project/&quot; title=&quot;透過visual studio建立安裝檔案&quot;&gt;透過visual studio建立安裝檔案&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;瀏覽器開啓應用程式是透過os層的機制處理，對於瀏覽器來說，不會回報是否開啓成功，這個部分就必須要透過其他的手法來偵測。&lt;/p&gt;</summary>
    
    
    
    <category term="Frontend" scheme="http://jiaming0708.github.io/categories/Frontend/"/>
    
    <category term="JavaScript" scheme="http://jiaming0708.github.io/categories/Frontend/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://jiaming0708.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>透過visual studio建立安裝檔案</title>
    <link href="http://jiaming0708.github.io/2021/11/06/vs-installer-project/"/>
    <id>http://jiaming0708.github.io/2021/11/06/vs-installer-project/</id>
    <published>2021-11-06T07:37:49.000Z</published>
    <updated>2021-12-23T14:31:36.225Z</updated>
    
    
    <summary type="html">&lt;p&gt;前一篇  &lt;a href=&quot;/2021/10/11/browser-open-application/&quot; title=&quot;如何在瀏覽器開啟應用程式&quot;&gt;如何在瀏覽器開啟應用程式&lt;/a&gt; 中講到開啟應用程式，接著要來講怎麼樣封裝應用程式在安裝檔內。&lt;/p&gt;</summary>
    
    
    
    <category term="Backend" scheme="http://jiaming0708.github.io/categories/Backend/"/>
    
    
    <category term="Backend" scheme="http://jiaming0708.github.io/tags/Backend/"/>
    
    <category term="installer" scheme="http://jiaming0708.github.io/tags/installer/"/>
    
    <category term="VS2019" scheme="http://jiaming0708.github.io/tags/VS2019/"/>
    
  </entry>
  
  <entry>
    <title>如何在瀏覽器開啟應用程式</title>
    <link href="http://jiaming0708.github.io/2021/10/11/browser-open-application/"/>
    <id>http://jiaming0708.github.io/2021/10/11/browser-open-application/</id>
    <published>2021-10-11T02:31:38.000Z</published>
    <updated>2021-12-23T14:31:36.225Z</updated>
    
    
    <summary type="html">&lt;p&gt;現在越來越多的服務會直接用網頁來開啟應用程式（例如 zoom/teams），不管是在手機或是電腦中，這篇主要就是要來分享在 windows 中如何做到這件事情。&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="http://jiaming0708.github.io/categories/Front-end/"/>
    
    
    <category term="window" scheme="http://jiaming0708.github.io/tags/window/"/>
    
    <category term="Front-end" scheme="http://jiaming0708.github.io/tags/Front-end/"/>
    
    <category term="browser" scheme="http://jiaming0708.github.io/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>[Design Pattern] facade(外觀) 和 interpreter(直繹器) 以及 mediator(協調者)</title>
    <link href="http://jiaming0708.github.io/2021/08/06/design-pattern-facade-mediator-interpreter/"/>
    <id>http://jiaming0708.github.io/2021/08/06/design-pattern-facade-mediator-interpreter/</id>
    <published>2021-08-06T02:29:54.000Z</published>
    <updated>2021-12-23T14:31:36.225Z</updated>
    
    
    <summary type="html">&lt;p&gt;繼上篇  &lt;a href=&quot;/2017/08/29/design-pattern-observer-decorator/&quot; title=&quot;[Design Pattern] Observer(觀察者)、Decoractor(裝飾器)&quot;&gt;[Design Pattern] Observer(觀察者)、Decoractor(裝飾器)&lt;/a&gt;，我們接著繼續看其他的模式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;迷之音:也隔太久了吧!!!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Facade 外觀&lt;/li&gt;
&lt;li&gt;Mediator 協調者&lt;/li&gt;
&lt;li&gt;Interpreter 直譯器&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Design Pattern" scheme="http://jiaming0708.github.io/categories/Design-Pattern/"/>
    
    
    <category term="Design Pattern" scheme="http://jiaming0708.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>[Blazor] 客製化元件</title>
    <link href="http://jiaming0708.github.io/2021/07/03/blazor-customize-component/"/>
    <id>http://jiaming0708.github.io/2021/07/03/blazor-customize-component/</id>
    <published>2021-07-03T01:27:13.000Z</published>
    <updated>2021-12-23T14:31:36.225Z</updated>
    
    
    <summary type="html">&lt;p&gt;不管是哪一個前端的框架或套件，寫一個專屬於自己專案的元件，是很基本的行為，今天要來分享的是在 Blazor 中建立元件的一些小撇步。&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="http://jiaming0708.github.io/categories/Front-end/"/>
    
    <category term="Blazor" scheme="http://jiaming0708.github.io/categories/Front-end/Blazor/"/>
    
    
    <category term="Blazor" scheme="http://jiaming0708.github.io/tags/Blazor/"/>
    
  </entry>
  
  <entry>
    <title>在blazor中使用JavaScript</title>
    <link href="http://jiaming0708.github.io/2021/06/27/blazor-interoperability-js/"/>
    <id>http://jiaming0708.github.io/2021/06/27/blazor-interoperability-js/</id>
    <published>2021-06-27T02:08:40.000Z</published>
    <updated>2021-12-23T14:31:36.225Z</updated>
    
    
    <summary type="html">&lt;p&gt;最近都在使用一個很新的前端框架，叫做 &lt;a href=&quot;https://docs.microsoft.com/zh-tw/aspnet/core/blazor/?view=aspnetcore-5.0&quot;&gt;Blazor&lt;/a&gt; ，是由微軟所推出給 dotnet 的開發人員所用，優點是可以使用一個語言打天下(迷之音: 真的能嗎?)，但現在的 Blazor 還太年輕，對應的東西都還沒那麼齊全，JavaScript 反而已經擁有很多套件/方法可以使用，今天就一起來看看怎麼將兩個結合一起使用。&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="http://jiaming0708.github.io/categories/Front-end/"/>
    
    <category term="Blazor" scheme="http://jiaming0708.github.io/categories/Front-end/Blazor/"/>
    
    
    <category term="Blazor" scheme="http://jiaming0708.github.io/tags/Blazor/"/>
    
    <category term="JS" scheme="http://jiaming0708.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>安裝 PowerShell7 及 Window Terminal 並套用 theme 美化</title>
    <link href="http://jiaming0708.github.io/2021/05/19/install-window-terminal-ps7-theme/"/>
    <id>http://jiaming0708.github.io/2021/05/19/install-window-terminal-ps7-theme/</id>
    <published>2021-05-19T13:09:59.000Z</published>
    <updated>2021-12-23T14:31:36.225Z</updated>
    
    
    <summary type="html">&lt;p&gt;最近再次投入了 window 平台的筆電，之前已經很習慣 mac 的 iTerm + oh-my-zsh 的功能，一直嘗試找有沒有類似的工具可以使用，很開心的找到了一個類似的工具，&lt;a href=&quot;https://github.com/microsoft/terminal&quot;&gt;Window Terminal&lt;/a&gt; 搭配最新的 &lt;a href=&quot;https://github.com/PowerShell/PowerShell&quot;&gt;PowerShell 7&lt;/a&gt; 套用 &lt;a href=&quot;https://ohmyposh.dev/&quot;&gt;oh-my-posh&lt;/a&gt; （是不是很相似阿，作者有說是參考 oh-my-zsh）&lt;/p&gt;</summary>
    
    
    
    <category term="Window" scheme="http://jiaming0708.github.io/categories/Window/"/>
    
    
    <category term="Window" scheme="http://jiaming0708.github.io/tags/Window/"/>
    
    <category term="Powershell" scheme="http://jiaming0708.github.io/tags/Powershell/"/>
    
    <category term="WindowTerminal" scheme="http://jiaming0708.github.io/tags/WindowTerminal/"/>
    
  </entry>
  
  <entry>
    <title>[Angular]透過輸入的方法動態載入模組</title>
    <link href="http://jiaming0708.github.io/2021/04/20/angular-dynamic-module-by-input/"/>
    <id>http://jiaming0708.github.io/2021/04/20/angular-dynamic-module-by-input/</id>
    <published>2021-04-20T06:30:50.000Z</published>
    <updated>2021-12-23T14:31:36.225Z</updated>
    
    
    <summary type="html">&lt;p&gt;在Angular中，除了先在Route定義好路徑並且載入模組以外，也能透過動態的方式去載入，能夠讓程式更加的靈活。今天想要試著用輸入的方法來做到動態載入模組，最後結果是失敗的，要來看看編譯後的結果，試著去理解原因。&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="http://jiaming0708.github.io/categories/Front-end/"/>
    
    <category term="Angular" scheme="http://jiaming0708.github.io/categories/Front-end/Angular/"/>
    
    
    <category term="Angular" scheme="http://jiaming0708.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[IIS] Gitea 搭配 reverse proxy 的問題排解</title>
    <link href="http://jiaming0708.github.io/2021/04/19/gitea-iis-reverse-proxy-trouble-shooting/"/>
    <id>http://jiaming0708.github.io/2021/04/19/gitea-iis-reverse-proxy-trouble-shooting/</id>
    <published>2021-04-19T13:20:54.000Z</published>
    <updated>2021-12-23T14:31:36.225Z</updated>
    
    
    <summary type="html">&lt;p&gt;繼前一篇 &lt;a href=&quot;/2021/04/09/iis-reverse-proxy-header/&quot; title=&quot;[IIS] 修正 reverse proxy 的 host 問題&quot;&gt;[IIS] 修正 reverse proxy 的 host 問題&lt;/a&gt; 後，又持續的跟 IIS 奮鬥了一陣子，才讓 Gitea 搭配 reverse proxy 的運作是正確的！&lt;/p&gt;</summary>
    
    
    
    <category term="IIS" scheme="http://jiaming0708.github.io/categories/IIS/"/>
    
    
    <category term="IIS" scheme="http://jiaming0708.github.io/tags/IIS/"/>
    
  </entry>
  
  <entry>
    <title>[IIS] 修正 reverse proxy 的 host 問題</title>
    <link href="http://jiaming0708.github.io/2021/04/09/iis-reverse-proxy-header/"/>
    <id>http://jiaming0708.github.io/2021/04/09/iis-reverse-proxy-header/</id>
    <published>2021-04-09T03:36:52.000Z</published>
    <updated>2021-12-23T14:31:36.217Z</updated>
    
    
    <summary type="html">&lt;p&gt;使用 IIS 做 reverse proxy 時，如果網站需要 OAuth，會自動導去其他網站，但會發現這時候 host 沒有被切過去，導致整個 auth 失敗，來分享一下可以怎麼樣解決這個問題。&lt;/p&gt;</summary>
    
    
    
    <category term="IIS" scheme="http://jiaming0708.github.io/categories/IIS/"/>
    
    
    <category term="IIS" scheme="http://jiaming0708.github.io/tags/IIS/"/>
    
  </entry>
  
  <entry>
    <title>在本機使用Docker架Gitea和DroneCI</title>
    <link href="http://jiaming0708.github.io/2021/03/22/gitea-drone-docker/"/>
    <id>http://jiaming0708.github.io/2021/03/22/gitea-drone-docker/</id>
    <published>2021-03-22T02:04:38.000Z</published>
    <updated>2021-12-23T14:31:36.209Z</updated>
    
    
    <summary type="html">&lt;p&gt;當要選擇自架的 git 伺服器，Gitea 是蠻多公司的選擇，在這個講求效率的開發時代，必須要搭配一個 CI/CD 的平台，讓我們可以更好更快的部屬，我選擇 Drone CI 作為平台，今天要來分享一下使用 docker-compose 建置在本機的步驟。&lt;/p&gt;</summary>
    
    
    
    <category term="CI/CD" scheme="http://jiaming0708.github.io/categories/CI-CD/"/>
    
    
    <category term="Docker" scheme="http://jiaming0708.github.io/tags/Docker/"/>
    
    <category term="CI/CD" scheme="http://jiaming0708.github.io/tags/CI-CD/"/>
    
    <category term="Gitea" scheme="http://jiaming0708.github.io/tags/Gitea/"/>
    
    <category term="Drone" scheme="http://jiaming0708.github.io/tags/Drone/"/>
    
  </entry>
  
  <entry>
    <title>[nginx] 設定reverse proxy當location使用regex</title>
    <link href="http://jiaming0708.github.io/2021/03/13/nginx-location-regex-reverse-proxy/"/>
    <id>http://jiaming0708.github.io/2021/03/13/nginx-location-regex-reverse-proxy/</id>
    <published>2021-03-13T01:03:58.000Z</published>
    <updated>2021-12-23T14:31:36.209Z</updated>
    
    
    <summary type="html">&lt;p&gt;一個網站有部分頁面是需要連到其他網站的，但又希望網址改變，這時候我們可以使用 reverse proxy 的技術來達成，今天要來分享的是如何在 nginx 中完成這樣的需求。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;reverse proxy 可以參考我之前 &lt;a href=&quot;/2017/09/02/reserve-proxy/&quot; title=&quot;寫的這篇&quot;&gt;寫的這篇&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="nginx" scheme="http://jiaming0708.github.io/categories/nginx/"/>
    
    
    <category term="nginx" scheme="http://jiaming0708.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>[AWS] Elastic Load Balancer變更TLS的設定</title>
    <link href="http://jiaming0708.github.io/2021/02/20/aws-elb-tls-setting/"/>
    <id>http://jiaming0708.github.io/2021/02/20/aws-elb-tls-setting/</id>
    <published>2021-02-20T06:33:28.000Z</published>
    <updated>2021-12-23T14:31:36.209Z</updated>
    
    
    <summary type="html">&lt;p&gt;網站的安全性中，其中有一項是關於 TLS 的檢查，建議是v1.2版以上。那服務如果是架設在 AWS 的 ELB 上，應該要怎麼做調整呢？&lt;/p&gt;</summary>
    
    
    
    <category term="AWS" scheme="http://jiaming0708.github.io/categories/AWS/"/>
    
    
    <category term="AWS" scheme="http://jiaming0708.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>設定nginx的log備份機制</title>
    <link href="http://jiaming0708.github.io/2021/01/26/logrotate-nginx/"/>
    <id>http://jiaming0708.github.io/2021/01/26/logrotate-nginx/</id>
    <published>2021-01-26T02:25:27.000Z</published>
    <updated>2021-12-23T14:31:36.209Z</updated>
    
    
    <summary type="html">&lt;p&gt;前幾天公司部屬新的版本到 prod server 的時候失敗了，檢查以後才發現是空間不足，問題是出現在 nginx log 目錄太肥，到底是發生什麼事情，今天來探討一下。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="http://jiaming0708.github.io/categories/linux/"/>
    
    
    <category term="nginx" scheme="http://jiaming0708.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>在GitKraken中使用template</title>
    <link href="http://jiaming0708.github.io/2020/10/25/git-template-in-kraken/"/>
    <id>http://jiaming0708.github.io/2020/10/25/git-template-in-kraken/</id>
    <published>2020-10-25T07:33:08.000Z</published>
    <updated>2021-12-23T14:31:36.205Z</updated>
    
    
    <summary type="html">&lt;p&gt;最近團隊開始規範 git commit 並且導入 &lt;a href=&quot;https://www.conventionalcommits.org/en/v1.0.0/&quot;&gt;Conventional commit&lt;/a&gt;，剛開始不熟悉都會一直要去翻文件，看看到底這時候要用什麼樣的類型，為了加速類別的輸入，可以在 commit 的 template 中設定，今天就來分享一下使用這個規範並且如何有效的套用在 &lt;a href=&quot;https://www.gitkraken.com/&quot;&gt;GitKraken&lt;/a&gt; 這套工具中。&lt;/p&gt;</summary>
    
    
    
    <category term="Git" scheme="http://jiaming0708.github.io/categories/Git/"/>
    
    
    <category term="Git" scheme="http://jiaming0708.github.io/tags/Git/"/>
    
    <category term="GitKraken" scheme="http://jiaming0708.github.io/tags/GitKraken/"/>
    
  </entry>
  
  <entry>
    <title>create-react-app 開發心得分享</title>
    <link href="http://jiaming0708.github.io/2020/09/07/create-react-app/"/>
    <id>http://jiaming0708.github.io/2020/09/07/create-react-app/</id>
    <published>2020-09-07T13:11:31.000Z</published>
    <updated>2021-12-23T14:31:36.205Z</updated>
    
    
    <summary type="html">&lt;p&gt;最近公司的一個新專案，因為網站的功能都必須要登入以後才能操作，因此選擇了 &lt;code&gt;create-react-app (CRA)&lt;/code&gt; 這個來做為 project base，前陣子剛上線第一個版本，順便來整理一些心得。&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="http://jiaming0708.github.io/categories/Front-end/"/>
    
    <category term="React" scheme="http://jiaming0708.github.io/categories/Front-end/React/"/>
    
    
    <category term="React" scheme="http://jiaming0708.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>專案設定 - vscode 以及 nvmrc</title>
    <link href="http://jiaming0708.github.io/2020/07/19/project-setting/"/>
    <id>http://jiaming0708.github.io/2020/07/19/project-setting/</id>
    <published>2020-07-19T15:26:00.000Z</published>
    <updated>2021-12-23T14:31:36.205Z</updated>
    
    
    <summary type="html">&lt;p&gt;open source總是有些不一樣的東西可以挖，今天為了要找一些使用action的範例，反而讓我找到了一些不一樣的設定，可以幫助我們。&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="http://jiaming0708.github.io/categories/Front-end/"/>
    
    <category term="Project" scheme="http://jiaming0708.github.io/categories/Front-end/Project/"/>
    
    
    <category term="vscode" scheme="http://jiaming0708.github.io/tags/vscode/"/>
    
    <category term="nvm" scheme="http://jiaming0708.github.io/tags/nvm/"/>
    
  </entry>
  
  <entry>
    <title>在 elasticsearch 更新後立即能夠查詢</title>
    <link href="http://jiaming0708.github.io/2020/05/21/elastic-update-refresh/"/>
    <id>http://jiaming0708.github.io/2020/05/21/elastic-update-refresh/</id>
    <published>2020-05-21T14:24:59.000Z</published>
    <updated>2021-12-23T14:31:36.197Z</updated>
    
    
    <summary type="html">&lt;p&gt;一般的關聯式資料庫下 update 以後，如果沒有下 commit 大部分情況是拿到舊的資料，但是在 elastic search 的環境下，沒有所謂的 commit，在異動資料後馬上執行 search 卻拿不到更新後的結果。&lt;/p&gt;</summary>
    
    
    
    <category term="backend" scheme="http://jiaming0708.github.io/categories/backend/"/>
    
    <category term="elasticsearch" scheme="http://jiaming0708.github.io/categories/backend/elasticsearch/"/>
    
    
    <category term="elasticsearch" scheme="http://jiaming0708.github.io/tags/elasticsearch/"/>
    
    <category term="database" scheme="http://jiaming0708.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>使用 Github Action 作為 CI/CD 將 libraray 發佈到 Github Package</title>
    <link href="http://jiaming0708.github.io/2020/05/21/github-action-and-package/"/>
    <id>http://jiaming0708.github.io/2020/05/21/github-action-and-package/</id>
    <published>2020-05-21T13:43:19.000Z</published>
    <updated>2021-12-23T14:31:36.197Z</updated>
    
    
    <summary type="html">&lt;p&gt;Continuous Integration (以下簡稱CI)，是在開發中很重要的一環，大家常用或常聽到的例如：Jenkins, Travis…等等的，我們常在使用的 Github 本身也有提供類似的服務。&lt;br&gt;今天來使用 Github 的全套服務，使用 Action 做 CI/CD 並且發佈到 Package。&lt;/p&gt;</summary>
    
    
    
    <category term="CI/CD" scheme="http://jiaming0708.github.io/categories/CI-CD/"/>
    
    
    <category term="Github" scheme="http://jiaming0708.github.io/tags/Github/"/>
    
    <category term="CI/CD" scheme="http://jiaming0708.github.io/tags/CI-CD/"/>
    
  </entry>
  
</feed>
